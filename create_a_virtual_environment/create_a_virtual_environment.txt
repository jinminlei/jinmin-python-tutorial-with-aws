Method 1.
mkdir create_a_virtual_environment_1 && cd create_a_virtual_environment_1
# Create a virtual environment
# https://docs.python.org/3/library/venv.html#creating-virtual-environments
python -m venv .
# Activate the virtual environment
# https://docs.python.org/3/library/venv.html
.\scripts\activate
# install packages to virtual environment
pip install -r requirements.txt
# run main.py
python main.py
# test main.py
python test_main.py
# Exit from virtual environment
deactivate

Method 2.
# https://pypi.org/project/pipenv/
# The problems that Pipenv seeks to solve are multi-faceted:

# You no longer need to use pip and virtualenv separately. They work together.
# Managing a requirements.txt file can be problematic, so Pipenv uses the upcoming Pipfile and Pipfile.lock instead, which is superior for basic use cases.
# Hashes are used everywhere, always. Security. Automatically expose security vulnerabilities.
# Give you insight into your dependency graph (e.g. $ pipenv graph).
# Streamline development workflow by loading .env files.
mkdir create_a_virtual_environment_2 && cd create_a_virtual_environment_2
# Install boto3 and create the virtual environment
pipenv install boto3
# run man.py
pipenv run python test_main.py jinmin
# run test_main.py (unit test)
pipenv run python test_main.py
# Enter virtual environment
pipenv shell
# Exit from virtual environment
exit
# Check the path of your virtual environment
pipenv --venv
# More to read about pipenv
# https://pipenv-fork.readthedocs.io/en/latest/advanced.html

